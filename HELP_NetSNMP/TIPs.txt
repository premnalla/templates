

NetSNMP
------------
man snmp_config
man snmpd
man snmpconf
snmpd.conf
snmp.conf
man snmpcmd


snmpd (the snmp agent)
----------------------

Net-SNMP Tutorial -- snmpd
This is a basic tutorial for configuring the Net-SNMP snmpd daemon. Note the word basic. This tutorial covers the use of snmpconf to create a configuration file (snmpd.conf) for snmpd. Note that snmpconf only understands a subset of the tokens that snmpd offers, so it is possible that some tokens will remain undocumented. Consult the snmpd.conf man page for more information on those tokens. 

The following sections are available: 

Location, location, location 
Understanding an existing configuration file 
Basic setup with snmpconf 
SNMPv3 user setup 
Common options not covered by snmpconf 
Simple testing 
Quick and dirty, for the impatient 

--------------------------------------------------------------------------------

Location, location, location
One of the most important things you need to know is where to find or create the snmpd.conf configuration file. The best way to find out is by using the debug output of the agent:  $ snmpd -Dread_config -H 2>&1 | grep "config path" | sort -u
read_config: config path used:/usr/local/etc/snmp:/usr/local/share/snmp:/usr/local/lib/snmp:/home/rstory/.snmp:/var/net-snmp
           
Now that you know what the search path is, you should check for any existing configuration files. Again, the best way is to ask snmpd:  $ snmpd -Dread_config -H 2>&1 | grep "Reading" | sort -u
read_config: Reading configuration /usr/local/share/snmp/snmpd.conf

If no existing file exists, snmpconf will help create one for you. 

--------------------------------------------------------------------------------

Understanding an existing configuration file
If you discover an existing configuration file, open it with your favorite text editor. If it appears well commented, then you can use the snmpd.conf man page as a reference to understand the existing configuration. If it does not appear to be well commented, you can use snmpconf to comment it for you, like so:  $ snmpconf -R FILENAME -a -f snmpd.conf  


This command will create a copy of the existing configuration file FILENAME as snmpd.conf in the current working directory. The copy will have comments documenting the tokens that snmpconf understands. 

--------------------------------------------------------------------------------

Basic setup with snmpconf
The Net-SNMP agent comes with a perl script to aid with configuration. This script, snmpconf, helps configure some of the basic configuration options offered by snmpd. The options are grouped together by functionality. The -G option to snmpconf will report the available groups. 

 $ snmpconf -G
Known GROUPs of tokens:

  system_setup
  basic_setup
  monitoring_services
  access_control
  trapsinks
 
  $ $ snmpconf -r none -g basic_setup
************************************************
*** Beginning basic system information setup ***
************************************************
Do you want to configure the information returned in the system MIB group
(contact info, etc)? (default = y):[RETURN]
 Notes:
This step is optional, but recommended.  
  Configuring: syslocation
Description:
  The [typically physical] location of the system.
    Note that setting this value here means that when trying to
    perform an snmp SET operation to the sysLocation.0 variable will make
    the agent return the "notWritable" error code.  IE, including
    this token in the snmpd.conf file will disable write access to
    the variable.
    arguments:  location_string

The location of the system: telephone closet, 3rd floor

Finished Output: syslocation  telephone closet, 3rd floor
 Notes:
This one is pretty self-explanatory.  
  Configuring: syscontact
Description:
  The contact information for the administrator
    Note that setting this value here means that when trying to
    perform an snmp SET operation to the sysContact.0 variable will make
    the agent return the "notWritable" error code.  IE, including
    this token in the snmpd.conf file will disable write access to
    the variable.
    arguments:  contact_string

The contact information: bill x704

Finished Output: syscontact  bill x704
 Notes:
The conctact information can be just about whatever you want: a phone number, extension, mail box or email address.  
  Do you want to properly set the value of the sysServices.0 OID
(if you don't know, just say no)? (default = y): n

 Notes:
Unless you already know what the sysServices OID does, it is probably best to skip it and use the default.  
  Do you want to allow SNMPv3 read-write user based access
(default = y):[RETURN]
 
 
  Configuring: rwuser
Description:
  a SNMPv3 read-write user
    arguments:  user [noauth|auth|priv] [restriction_oid]

The SNMPv3 user that should have read-write access: fred
The minimum security level required for that user
[noauth|auth|priv, default = auth]: auth
The OID that this community should be restricted to
[if appropriate]:[RETURN]

Finished Output: rwuser  fred ?
Do another rwuser line? (default = y):n
 Notes:
fred can read or write any object that the agent supports  
  Do you want to allow SNMPv3 read-only user based access (default = y):

Configuring: rouser
Description:
  a SNMPv3 read-only user
    arguments:  user [noauth|auth|priv] [restriction_oid]

Enter the SNMPv3 user that should have read-only access to the system: sally
The minimum security level required for that user
[noauth|auth|priv, default = auth]: auth
The OID that this community should be restricted to
[if appropriate]: .1.3.6.1.4.1.8072

Finished Output: rouser  sally auth .1.3.6.1.4.1.8072
Do another rouser line? (default = y): n
 Notes:
sally can only read objects in the netSnmp branch of the agent  
  Do you want to allow SNMPv1/v2c read-write community access (default = y):

Configuring: rwcommunity
Description:
  a SNMPv1/SNMPv2c read-write access community name
    arguments:  community [default|hostname|network/bits] [oid]

Enter the community name to add read-write access for: private
The hostname or network address to accept this community name from
[RETURN for all]:127.0.0.1
The OID that this community should be restricted to
[RETURN for no-restriction]: RETURN

Finished Output: rwcommunity  private 127.0.0.1 .1.3.6.1.2.1.1
Do another rwcommunity line? (default = y): n
 Notes:
Anyone with shell access on the host can use the community string private to write to any object in the system tree. (Not recommended)  
  Do you want to allow SNMPv1/v2c read-only community access (default = y): y

Configuring: rocommunity
Description:
  a SNMPv1/SNMPv2c read-only access community name
    arguments:  community [default|hostname|network/bits] [oid]

The community name to add read-only access for: public
The hostname or network address to accept this community name from
[RETURN for all]: [RETURN]
The OID that this community should be restricted to
[RETURN for no-restriction]: .1.3.6.1.2.1.1

Finished Output: rocommunity  public .1.3.6.1.2.1.1 .1.3.6.1.2.1.1
Do another rocommunity line? (default = y): n
 Notes:
Anyone using the commonly used community string public can read any object in the system branch of the tree  
  The following files were created:

  snmpd.conf

These files should be moved to /usr/local/share/snmp if you
want them used by everyone on the system.  In the future, if you add
the -i option to the command line I'll copy them there automatically for you.

Or, if you want them for your personal use only, copy them to
/home/rks/.snmp .  In the future, if you add the -p option to the
command line I'll copy them there automatically for you.
 Notes:
<== PAY ATTENTION
This file is not automatically installed. You must copy it in to the correct location.  


That last notes is worth repeating, as is is often overlooked: 

This file is not automatically installed. You must copy it in to the correct location. 
See the location section to determine the correct location. 

Another important note: the rouser, rwuser, rwcommunity and rocommunity options found in the snmpd.conf configuration file are only half of the setup required for SNMPv3 users. The other half of the setup invovles setting up the SNMPv3 authentication and password parameters, which go in the persistent snmpd.conf file (usually found in /var/net-snmp/snmpd.conf). This file must be edited while the agent is not running, or any changes will be overwritten when the agent exits. See the next section for more details. 

--------------------------------------------------------------------------------

SNMPv3 user setup
If you choose not to set up any SNMPv3 users, you can skip this section. 

This section under contruction. Please see the snmpusm man page for information on setting up SNMPv3 users. 
--------------------------------------------------------------------------------
Common options not covered by snmpconf
Some common tokens that you might want to add to the configuration file generated by snmpconf include: 

VACM access control:
The rouser, rwuser, rwcommunity and rocommunity access control options are simply wrappers around the more flexible (and thus complex) VACM access control tokens com2sec, view, group, and access. More information about these tokens can be found in the snmpd.conf man page and the VACM page. 
... TBD ... 

--------------------------------------------------------------------------------
Simple testing
If you want to simplify configuration (eg while testing), you can ignore the default configuration files and specify your configuration on the command line. Here is an example that can be used to run a freshly build agent from the source directory, without root access: 

 agent/snmpd -r -f -L -C --rocommunity="test 127.0.0.1" udp:1161  
--------------------------------------------------------------------------------

Quick and dirty, for the impatient
If you just want a cut-and-paste answer to get your agent up and running as quick a possible, the simplest configuration file that we can recommned is this:  rocommunity default .1.3.6.1.2.1.1  

snmpconf
----------
This utility is used to create snmpd.conf and perhaps other configuration files.


Generating and Receiving traps
----------------------------------
From one window:
LINUX:/usr/sbin/snmptrapd -f

From another window:
LINUX:/usr/sbin/snmptrap -d -v 2c -c public localhost '' .1.3.6.1.1.1.3 .1.3.6.2.3.4.5.0 s "hello world"

NetSNMP sending traps
----------------------
The SNMPv2 notification
The format of the SNMPv2 notification is somewhat different. The definition in the MIB file looks as follows 

NOTIFICATION-TEST-MIB DEFINITIONS ::= BEGIN
        IMPORTS ucdavis FROM UCD-SNMP-MIB;

demonotifs OBJECT IDENTIFIER ::= { ucdavis 991 }

demo-notif NOTIFICATION-TYPE
	STATUS current
        OBJECTS { sysLocation }
	DESCRIPTION "Just a test notification"
        ::= { demonotifs 17 }

END               
This is a definition that is similar to the SNMPv1 trap given above. Issuing this notification looks as follows 

% snmptrap -v 2c -c public localhost '' NOTIFICATION-TEST-MIB::demo-notif \
	SNMPv2-MIB::sysLocation.0 s "just here"
and the resulting output from the trap daemon is 

1999-11-13 08:31:33 localhost [127.0.0.1]:
        SNMPv2-MIB::sysUpTime.0 = Timeticks: (13917129) 1 day, 14:39:31.29
        SNMPv2-MIB::snmpTrapOID.0 = OID: NOTIFICATION-TEST-MIB::demo-notif
        SNMPv2-MIB::sysLocation.0 = "just here" 


Daemon process - forking and closing STDERR, etc
-------------------------------------------------
        switch (fork()) {
        case -1:
            fprintf(stderr, "bad fork - %s\n", strerror(errno));
            _exit(1);

        case 0:
            /*
             * become process group leader
             */
            if (setsid() == -1) {
                fprintf(stderr, "bad setsid - %s\n", strerror(errno));
                _exit(1);
            }

            /*
             * if we are forked, we don't want to print out to stdout or stderr
             */
            fd = open("/dev/null", O_RDWR);
            dup2(fd, STDIN_FILENO);
            dup2(fd, STDOUT_FILENO);
            dup2(fd, STDERR_FILENO);
            close(fd);

        default:
            _exit(0);
        }

SNMP ASN types
------------------
#define ASN_BOOLEAN         ((u_char)0x01)
#define ASN_INTEGER         ((u_char)0x02)
#define ASN_BIT_STR         ((u_char)0x03)
#define ASN_OCTET_STR       ((u_char)0x04)
#define ASN_NULL            ((u_char)0x05)
#define ASN_OBJECT_ID       ((u_char)0x06)
#define ASN_SEQUENCE        ((u_char)0x10)
#define ASN_SET             ((u_char)0x11)

#define ASN_UNIVERSAL       ((u_char)0x00)
#define ASN_APPLICATION     ((u_char)0x40)
#define ASN_CONTEXT         ((u_char)0x80)
#define ASN_PRIVATE         ((u_char)0xC0)

#define ASN_PRIMITIVE       ((u_char)0x00)
#define ASN_CONSTRUCTOR     ((u_char)0x20)

#define ASN_LONG_LEN        (0x80)
#define ASN_EXTENSION_ID    (0x1F)
#define ASN_BIT8            (0x80)

OIDS
----

MTA OIDS
---
Descrip,    {OID:.1.3.6.1.2.1.1.1.0}{OID_TYPE:SCALAR};
Up_time,    {OID:.1.3.6.1.2.1.1.8.0}{OID_TYPE:SCALAR};
Sys_Obj_Id,    {OID:.1.3.6.1.2.1.1.2.0}{OID_TYPE:SCALAR};
Provisioning_State,    {OID:.1.3.6.1.4.1.4491.2.2.1.1.1.9.0}{OID_TYPE:SCALAR};
Provisioning_Counter,    {OID:.1.3.6.1.4.1.4491.2.2.1.1.1.12.0}{OID_TYPE:SCALAR};
Config_File,    {OID:.1.3.6.1.4.1.4491.2.2.1.1.2.5.0}{OID_TYPE:SCALAR};
Config_FQDN,    {OID:.1.3.6.1.4.1.4491.2.2.1.1.1.5.0}{OID_TYPE:SCALAR};
Config_END_POINT_COUNT,    {OID:.1.3.6.1.4.1.4491.2.2.1.1.1.6.0}{OID_TYPE:SCALAR}

Arris 202 Battery
-----------------
Battery_State_1,    {OID:.1.3.6.1.4.1.4115.10.2.6.0}{OID_TYPE:SCALAR};

Arris 402 Battery
-----------------
Battery_State_1, {OID:.1.3.6.1.4.1.4115.1.3.3.1.3.5.3.1.2.1}{OID_TYPE:SCALAR};
Battery_State_2, {OID:.1.3.6.1.4.1.4115.1.3.3.1.3.5.3.1.2.2}{OID_TYPE:SCALAR};

CMTS CM Status table:
---------------------
MacAddress{OID: 1.3.6.1.2.1.10.127.1.3.3.1.2} {OID_TYPE:COLUMN}
Status{OID:1.3.6.1.2.1.10.127.1.3.3.1.9} {OID_TYPE:COLUMN};
US_Index{OID:1.3.6.1.2.1.10.127.1.3.3.1.5}{OID_TYPE:COLUMN};
IpAddress{OID:1.3.6.1.2.1.10.127.1.3.3.1.3}{OID_TYPE:COLUMN};


ifTable
IF_DESCRIPTION{OID: 1.3.6.1.2.1.2.2.1.2}{OID_TYPE:COLUMN};
IF_TYPE{OID: 1.3.6.1.2.1.2.2.1.3}{OID_TYPE:COLUMN};
IF_INDEX{COLUMN_ELEMENT_INDEX: IF_DESCRIPTION};

ifStackTable
IF DOCSIS_20 capable AND ifType EQ 129 THEN
IF NEXT_LOWER LAYER EQ 0 THEN
it is Upstream
END IF
END IF
(OID) 1.3.6.1.2.1.31.1.2.1.3. 
ifMIB = 31
ifMIBObjects = 31.1
ifStackTable = 31.1.2
ifStackTable = 31.1.2
ifStackEntry = 31.1.2.1
ifStackHigherLayer = 31.1.2.1.1
ifStackLowerLayer = 31.1.2.1.2
ifStackStatus = 31.1.2.1.3

CMTS Up time
1.3.6.1.2.1.1.3.0

CMTS Descriptin
1.3.6.1.2.1.1.1.0

CMTS capability
1.3.6.1.2.1.10.127.1.1.5

SNMP log location
----------------------
/var/log/snmpd.log

/* persistent storage location */
/var/net-snmp

---------------------------------------------------------
            Net-SNMP configuration summary:
---------------------------------------------------------

  SNMP Versions Supported:    1 2c 3
  Net-SNMP Version:           5.3.0.1
  Building for:               linux
  Network transport support:  Callback Unix TCP UDP TCPIPv6 UDPIPv6
  SNMPv3 Security Modules:    usm
  Agent MIB code:             mibII/vacm_vars utilities/execute mibII/ipv6
  SNMP Perl modules:          disabled
  Embedded perl support:      disabled
  Authentication support:     MD5
  Encryption support:


